MainProgram.java :
import java.io.*;
import java.util.*;

class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    int studentID;
    String name;
    String grade;

    public Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "StudentID: " + studentID + ", Name: " + name + ", Grade: " + grade;
    }
}

class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    int id;
    String name;
    String designation;
    double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary;
    }
}

public class MainProgram {
    private static final String EMP_FILE = "employees.dat";
    private static final String STUDENT_FILE = "student.ser";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        while (true) {
            System.out.println("\n===== Main Menu =====");
            System.out.println("1. Part A - Sum of Integers (Autoboxing & Unboxing)");
            System.out.println("2. Part B - Serialize & Deserialize Student");
            System.out.println("3. Part C - Employee Management System");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");

            int choice = sc.nextInt();
            sc.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    partA(sc);
                    break;
                case 2:
                    partB(sc);
                    break;
                case 3:
                    partC(sc);
                    break;
                case 4:
                    System.out.println("Exiting... Goodbye!");
                    sc.close();
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }

    // ---------- Part A ----------
    private static void partA(Scanner sc) {
        System.out.println("Enter integers separated by space: ");
        String input = sc.nextLine();
        String[] tokens = input.split(" ");
        ArrayList<Integer> numbers = new ArrayList<>();

        for (String token : tokens) {
            numbers.add(Integer.parseInt(token)); // Autoboxing
        }

        int sum = 0;
        for (Integer num : numbers) {
            sum += num; // Unboxing
        }

        System.out.println("Numbers: " + numbers);
        System.out.println("Sum = " + sum);
    }

    // ---------- Part B ----------
    private static void partB(Scanner sc) {
        try {
            System.out.print("Enter Student ID: ");
            int id = sc.nextInt();
            sc.nextLine();
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Grade: ");
            String grade = sc.nextLine();

            Student s = new Student(id, name, grade);

            // Serialize
            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(STUDENT_FILE));
            oos.writeObject(s);
            oos.close();
            System.out.println("Student serialized to " + STUDENT_FILE);

            // Deserialize
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(STUDENT_FILE));
            Student deserialized = (Student) ois.readObject();
            ois.close();

            System.out.println("Deserialized Student: " + deserialized);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // ---------- Part C ----------
    private static void partC(Scanner sc) {
        while (true) {
            System.out.println("\n--- Employee Management ---");
            System.out.println("1. Add Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Back to Main Menu");
            System.out.print("Choose: ");
            int choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1:
                    addEmployee(sc);
                    break;
                case 2:
                    displayEmployees();
                    break;
                case 3:
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private static void addEmployee(Scanner sc) {
        try {
            System.out.print("Enter Employee ID: ");
            int id = sc.nextInt();
            sc.nextLine();
            System.out.print("Enter Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Designation: ");
            String designation = sc.nextLine();
            System.out.print("Enter Salary: ");
            double salary = sc.nextDouble();

            Employee e = new Employee(id, name, designation, salary);

            ArrayList<Employee> employees = readEmployeeFile();
            employees.add(e);

            ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(EMP_FILE));
            oos.writeObject(employees);
            oos.close();

            System.out.println("Employee added successfully!");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static void displayEmployees() {
        ArrayList<Employee> employees = readEmployeeFile();
        if (employees.isEmpty()) {
            System.out.println("No employees found.");
        } else {
            System.out.println("Employee Records:");
            for (Employee e : employees) {
                System.out.println(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static ArrayList<Employee> readEmployeeFile() {
        ArrayList<Employee> employees = new ArrayList<>();
        try {
            File file = new File(EMP_FILE);
            if (!file.exists()) return employees;

            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file));
            employees = (ArrayList<Employee>) ois.readObject();
            ois.close();
        } catch (Exception e) {
            // Ignore if file empty
        }
        return employees;
    }
}
MainProgram.class :
// Source code is decompiled from a .class file using FernFlower decompiler (from Intellij IDEA).
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

public class MainProgram {
   private static final String EMP_FILE = "employees.dat";
   private static final String STUDENT_FILE = "student.ser";

   public MainProgram() {
   }

   public static void main(String[] var0) {
      Scanner var1 = new Scanner(System.in);

      while(true) {
         System.out.println("\n===== Main Menu =====");
         System.out.println("1. Part A - Sum of Integers (Autoboxing & Unboxing)");
         System.out.println("2. Part B - Serialize & Deserialize Student");
         System.out.println("3. Part C - Employee Management System");
         System.out.println("4. Exit");
         System.out.print("Choose an option: ");
         int var2 = var1.nextInt();
         var1.nextLine();
         switch (var2) {
            case 1:
               partA(var1);
               break;
            case 2:
               partB(var1);
               break;
            case 3:
               partC(var1);
               break;
            case 4:
               System.out.println("Exiting... Goodbye!");
               var1.close();
               return;
            default:
               System.out.println("Invalid choice. Try again.");
         }
      }
   }

   private static void partA(Scanner var0) {
      System.out.println("Enter integers separated by space: ");
      String var1 = var0.nextLine();
      String[] var2 = var1.split(" ");
      ArrayList var3 = new ArrayList();
      String[] var4 = var2;
      int var5 = var2.length;

      for(int var6 = 0; var6 < var5; ++var6) {
         String var7 = var4[var6];
         var3.add(Integer.parseInt(var7));
      }

      int var8 = 0;

      Integer var10;
      for(Iterator var9 = var3.iterator(); var9.hasNext(); var8 += var10) {
         var10 = (Integer)var9.next();
      }

      System.out.println("Numbers: " + var3);
      System.out.println("Sum = " + var8);
   }

   private static void partB(Scanner var0) {
      try {
         System.out.print("Enter Student ID: ");
         int var1 = var0.nextInt();
         var0.nextLine();
         System.out.print("Enter Name: ");
         String var2 = var0.nextLine();
         System.out.print("Enter Grade: ");
         String var3 = var0.nextLine();
         Student var4 = new Student(var1, var2, var3);
         ObjectOutputStream var5 = new ObjectOutputStream(new FileOutputStream("student.ser"));
         var5.writeObject(var4);
         var5.close();
         System.out.println("Student serialized to student.ser");
         ObjectInputStream var6 = new ObjectInputStream(new FileInputStream("student.ser"));
         Student var7 = (Student)var6.readObject();
         var6.close();
         System.out.println("Deserialized Student: " + var7);
      } catch (Exception var8) {
         var8.printStackTrace();
      }

   }

   private static void partC(Scanner var0) {
      while(true) {
         System.out.println("\n--- Employee Management ---");
         System.out.println("1. Add Employee");
         System.out.println("2. Display All Employees");
         System.out.println("3. Back to Main Menu");
         System.out.print("Choose: ");
         int var1 = var0.nextInt();
         var0.nextLine();
         switch (var1) {
            case 1:
               addEmployee(var0);
               break;
            case 2:
               displayEmployees();
               break;
            case 3:
               return;
            default:
               System.out.println("Invalid choice.");
         }
      }
   }

   private static void addEmployee(Scanner var0) {
      try {
         System.out.print("Enter Employee ID: ");
         int var1 = var0.nextInt();
         var0.nextLine();
         System.out.print("Enter Name: ");
         String var2 = var0.nextLine();
         System.out.print("Enter Designation: ");
         String var3 = var0.nextLine();
         System.out.print("Enter Salary: ");
         double var4 = var0.nextDouble();
         Employee var6 = new Employee(var1, var2, var3, var4);
         ArrayList var7 = readEmployeeFile();
         var7.add(var6);
         ObjectOutputStream var8 = new ObjectOutputStream(new FileOutputStream("employees.dat"));
         var8.writeObject(var7);
         var8.close();
         System.out.println("Employee added successfully!");
      } catch (Exception var9) {
         var9.printStackTrace();
      }

   }

   private static void displayEmployees() {
      ArrayList var0 = readEmployeeFile();
      if (var0.isEmpty()) {
         System.out.println("No employees found.");
      } else {
         System.out.println("Employee Records:");
         Iterator var1 = var0.iterator();

         while(var1.hasNext()) {
            Employee var2 = (Employee)var1.next();
            System.out.println(var2);
         }
      }

   }

   private static ArrayList<Employee> readEmployeeFile() {
      ArrayList var0 = new ArrayList();

      try {
         File var1 = new File("employees.dat");
         if (!var1.exists()) {
            return var0;
         }

         ObjectInputStream var2 = new ObjectInputStream(new FileInputStream(var1));
         var0 = (ArrayList)var2.readObject();
         var2.close();
      } catch (Exception var3) {
      }

      return var0;
   }
}

